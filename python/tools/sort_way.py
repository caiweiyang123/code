"""
1. 排序的概念
什么是排序：所谓排序，就是使一串记录按照其中的某个或某些关键字的大小，按递增或递减方式排列起来的操作。

排序的稳定性：假定在待排序的记录序列中存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，
即在原序列中，r[i]=r[j]，且r[i]在r[j]之前，而在排序后的序列中，r[i]仍在r[j]之前，则称这种排序算法是稳定的；否则称为该排序算法是不稳定的。
"""
# 1. 直接插入排序
"""
1.1 排序思想
直接插入排序是一种简单的插入排序法，其基本思想是：把待排序的记录按其关键码值的大小逐个插入到一个已经排好序的有序序列中，直到所有的记录插入完为止，得到一个新的有序序列 。
"""


def insertion_sort(arr):
    # 遍历数组
    for i in range(1, len(arr)):
        key = arr[i]  # 当前待插入的元素
        j = i - 1  # 从当前元素的前一个位置开始比较
        # 将比 key 大的元素向右移动
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key  # 将 key 插入到正确的位置


# 2. 希尔排序
"""
2.1 排序思想
希尔排序法又称缩小增量法，也是插入排序的一种，是对直接插入排序的优化。希尔排序法的基本思想是：
先选定一个整数，把待排序文件中所有记录分成 gap 个组，所有距离为 gap 的记录分在同一组内，并对每一组内的记录进行直接插入排序，
然后重复上述分组和排序的工作，当全部分组都进行排序后，最后再整体进行一次直接插入排序，使得文件内所有记录达到有序.
"""


def shell_sort(arr):
    n = len(arr)
    gap = n // 2  # 初始化间隔

    # 不断缩小间隔直到为1
    while gap > 0:
        # 从间隔开始遍历数组
        for i in range(gap, n):
            temp = arr[i]
            j = i
            # 对间隔步长的子数组进行插入排序
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp

        # 缩小间隔
        gap //= 2


# 3. 直接选择排序
"""
3.1 排序思想
直接选择排序即每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，
直到全部待排序数据元素排完；这里我们对其做一些简单的优化 – 每次选两个数，选出最小的放在最前面，选出最大的放在最后面。
"""


def selection_sort(arr):
    # 遍历整个数组
    for i in range(len(arr)):
        min_index = i  # 记录最小元素的索引

        # 在未排序部分找到最小元素的索引
        for j in range(i + 1, len(arr)):
            if arr[j] < arr[min_index]:
                min_index = j

        # 将找到的最小元素与当前位置交换
        arr[i], arr[min_index] = arr[min_index], arr[i]


if __name__ == '__main__':
    # 示例
    arr = [12, 34, 54, 2, 3, 34, 73]
    selection_sort(arr)
    print("排序后的数组：", arr)
